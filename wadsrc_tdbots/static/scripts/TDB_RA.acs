#DEFINE MAX_CWEAP 128
#DEFINE MAX_CAMMO 256

int TDB_TotalCWeap;
str TDB_CWeapons[MAX_CWEAP] = {""};
str TDB_CAmmo[MAX_CAMMO] = {""};

function void TDBots_RA_Equip (void)
{
	bool CWLDetected = FALSE;

	if(GetCVAR("tdbots_rocketarena") == FALSE) {return;}
	
	//Custom weapon list detected, use it.
	if(StrLen(TDB_CWeapons[0]) > 0)
	{
		for(int w; StrLen(TDB_CWeapons[w]) > 0; w++)
		{
			GiveInventory(TDB_CWeapons[w],1);
		}
		
		if(StrLen(TDB_CAmmo[0]) > 0)
		{
			for(int a; StrLen(TDB_CAmmo[a]) > 0; a++)
			{
				TDB_MaxGive(TDB_CAmmo[a]);
			}
			CWLDetected = TRUE;
		}
		
		SetWeapon(TDB_CWeapons[random(0,TDB_TotalCWeap)]);
	}
	
	else if(CurrentGame == GAME_DOOM)
	{
		if(VanillaDoom)
		{
			GiveInventory("BotBFG9000",1);
			GiveInventory("BotSuperShotgun",1);
			GiveInventory("BotPlasmaRifle",1);
			GiveInventory("BotRocketLauncher",1);
			GiveInventory("BotChaingun",1);
			GiveInventory("BotShotgun",1);
			
			if(!PlayerIsBot(PlayerNumber()))
			{
				GiveInventory("BotChainsaw",1);
			}
			
			GiveInventory("Backpack",1); //To max ammo capacity
			
			//This max outs all ammo
			TDB_MaxGive("Clip");
			TDB_MaxGive("Shell");
			TDB_MaxGive("Cell");
			TDB_MaxGive("RocketAmmo");
			
			GiveInventory("MegaSphere",1);
		}
		else //10 backpacks are given, with 5 of each weapon to maximize ammo
		{
			TDB_RA_Give("Backpack");
			TDB_RA_Give("Backpack");
			
			TDB_RA_Give("BFG9000");
			TDB_RA_Give("SuperShotgun");
			TDB_RA_Give("PlasmaRifle");
			TDB_RA_Give("RocketLauncher");
			TDB_RA_Give("Chaingun");
			TDB_RA_Give("Shotgun");
			
			TDB_GiveItem("MegaSphere");
			
			if(!PlayerIsBot(PlayerNumber())) {TDB_GiveItem("Chainsaw");}
		}
	}
	
	else if(CurrentGame == GAME_HERETIC)
	{
		GiveInventory("BotMace",1);
		GiveInventory("BotSkullRod",1);
		GiveInventory("BotPhoenixRod",1);
		GiveInventory("BotBlaster",1);
		GiveInventory("BotCrossbow",1);
		
		GiveInventory("BagOfHolding",1);
		
		TDB_MaxGive("GoldWandAmmo");
		TDB_MaxGive("CrossbowAmmo");
		TDB_MaxGive("MaceAmmo");
		TDB_MaxGive("BlasterAmmo");
		TDB_MaxGive("SkullRodAmmo");
		
		if(!PlayerIsBot(PlayerNumber())) {GiveInventory("BotGauntlets",1);}
		
		GiveInventory("SoulSphere",1);
		GiveInventory("EnchantedShield",1);
	}
	
	else if(CurrentGame == GAME_STRIFE)
	{
		GiveInventory("BotStrifeGrenadeLauncher",1);
		GiveInventory("BotMauler",1);
		GiveInventory("BotMiniMissileLauncher",1);
		GiveInventory("BotAssaultGun",1);
		GiveInventory("BotStrifeCrossbow",1);
		
		GiveInventory("AmmoSatchel",1);
		
		TDB_MaxGive("HEGrenadeRounds");
		TDB_MaxGive("PhosphorusGrenadeRounds");
		TDB_MaxGive("ClipOfBullets");
		TDB_MaxGive("MiniMissiles");
		TDB_MaxGive("EnergyPod");
		TDB_MaxGive("PoisonBolts");
		TDB_MaxGive("ElectricBolts");
		
		GiveInventory("SoulSphere",1);
		GiveInventory("MetalArmor",1);
	}
	
	else if(CurrentGame == GAME_HEXEN)
	{
		GiveInventory("BotCWeapWraithverge",1);
		GiveInventory("BotFWeapQuietus",1);
		GiveInventory("BotMWeapBloodscourge",1);
		
		GiveInventory("BotCWeapFlame",1);
		GiveInventory("BotFWeapHammer",1);
		GiveInventory("BotMWeapLightning",1);
		
		GiveInventory("BotCWeapStaff",1);
		GiveInventory("BotFWeapAxe",1);
		GiveInventory("BotMWeapFrost",1);
		
		TDB_MaxGive("Mana1");
		TDB_MaxGive("Mana2");
		
		GiveInventory("SoulSphere",1);
		GiveInventory("AmuletOfWarding",1);
	}
	
	SetActorVelocity(0,0.01,0,0,1,0);
	
	if(!CWLDetected)
	{
		TDB_RandomWeapon();
	}
}

//Note: commented log lines are just for debugging, you can uncomment them
//if you need to.
function void TDB_RA_ParseWeaponList (str string)
{
	//Don't bother doing anything if it's just empty
	if(strcmp(string, "") == 0) {return;}

	//Length of the string passed
	int stringlength = strlen(string);
	
	//StrMid parameters, to copy a full actor name to the StartWeapons array
	int strmidstart;
	int strmidend;
	
	//Keeps track of current character index so i can pass it to strmidstart
	//even after restarting it
	int strmidstart2;
	
	//Actor name and currently stored character
	int currentarrayindex;
	str storedchar;
	
	//Processing item amount instead of item name?
	bool procamount;
	for(int currchar = 0; currchar <= stringlength; currchar++)
	{
		storedchar = StrMid(string, currchar, 1);//GetChar didn't work dunno why
		
		//Last character? Save this last character and stop.
		if(currchar == stringlength)
		{
			TDB_CWeapons[currentarrayindex] = strmid(string, strmidstart, strmidend);
			TDB_TotalCWeap = currentarrayindex;
			return;
		}
		
		//Hack to work around a very strange bug where an extra character would
		//be added depending on whatever the first call of StrCmp contained.
		StrCmp(storedchar, "", 1);
		
		//If a separator is detected, switch to next actor name and clear the
		//current string saved in memory.
		if(StrCmp(storedchar, ";") == 0)
		{
			//log(s:"separator found");
			TDB_CWeapons[currentarrayindex] = strmid(string, strmidstart, strmidend);

			procamount = FALSE;
			strmidstart = strmidstart2+1; //needs to be AFTER the separator
			strmidstart2++;
			strmidend = 0;
			//log(s: "strmidstart = ",i:strmidstart);
			currentarrayindex++;
		}
		
		//If not, just continue storing the actor name.
		else
		{
			strmidend++;
			strmidstart2++;
			//log(s: "strmidend = ",i:strmidend);
		}
	}
}

//Removed comments since this is basically the same code as above
function void TDB_RA_ParseAmmoList (str string)
{
	if(strcmp(string, "") == 0) {return;}

	int stringlength = strlen(string);

	int strmidstart;
	int strmidend;

	int strmidstart2;

	int currentarrayindex;
	str storedchar;

	bool procamount;
	for(int currchar = 0; currchar <= stringlength; currchar++)
	{
		storedchar = StrMid(string, currchar, 1);
		
		if(currchar == stringlength)
		{
			TDB_CAmmo[currentarrayindex] = strmid(string, strmidstart, strmidend);
			currentarrayindex++;
			return;
		}
		
		StrCmp(storedchar, "", 1);
		
		if(StrCmp(storedchar, ";") == 0)
		{
			//log(s:"separator found");
			TDB_CAmmo[currentarrayindex] = strmid(string, strmidstart, strmidend);

			procamount = FALSE;
			strmidstart = strmidstart2+1;
			strmidstart2++;
			strmidend = 0;
			currentarrayindex++;
		}
		
		else
		{
			strmidend++;
			strmidstart2++;
		}
	}
}

Script "TDB_RA_WeaponListInit" OPEN
{
	if(GetCVAR("tdbots_rocketarena") == FALSE) {terminate;}
	
	str WeaponListName = "TDBOTS_RA_WEAPONS";
	str WeaponList = StrParam(l:WeaponListName);
	
	if(strcmp(WeaponList, WeaponListName) == 0) {terminate;}
	
	delay(1);
	
	TDB_RA_ParseWeaponList(WeaponList);
	
	
	str AmmoListName = "TDBOTS_RA_AMMO";
	str AmmoList = StrParam(l:AmmoListName);
	
	if(strcmp(AmmoList, AmmoListName) == 0) {terminate;}
	
	delay(1);
	
	TDB_RA_ParseAmmoList(AmmoList);
}