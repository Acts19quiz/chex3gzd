//TDBots: The fast-performing bots
//
//(C) 2019 Moises Aguirre / Koneoi / TDRR
//
//Licensed under the MIT license

#include "TDBots/PATHNODING.dec" //Waypointing and such things
#include "TDBots/NODESTUDIO.dec"

#include "TDBots/DOOMWEAPONS.dec" //Doom weapons
#include "TDBots/HTICWEAPONS.dec" //Heretic weapons
#include "TDBots/HEXNWEAPONS.dec" //Hexen weapons
#include "TDBots/STRFWEAPONS.dec" //Strife weapons
#include "TDBots/CHEXWEAPONS.dec" //Chex weapons

//Remember to also check the constants in PATHNODING.dec

//Bot_MoveSpeed got moved to ACS, make sure to look for it there.

//Bot button presses, BotAltAttack is unused in the main games
Actor BotAttack : Inventory {}
Actor BotAltAttack : Inventory {}

//Bot state tokens
Actor BotSeekingItem : Inventory {}
Actor BotPrecisionMode : Inventory {}

//Weapon flags
Actor BotExplosiveWeapon : Inventory {}
Actor BotMeleeWeapon : Inventory {}
Actor BotForceInacc : Inventory {} //Simulate A_Refire bullet spread
Actor BotCloseRange : Inventory {} //Bot stays close to target but outside of
									//melee range. Useful for Shotguns.

//CVAR option tokens
Actor TDBots_NavNodes : Inventory {}
Actor TDBots_LessFOV : Inventory {}
Actor TDBots_FollowNodeZan : Inventory {}

//Bot info tokens
Actor TDBots_Success : Inventory {}
ACtor TDBots_IsFriend : Inventory {}
Actor TDBots_IsBot : Inventory {} //So pathnodes are only used by bots

//Timers
Actor BotAttentionTimer : Inventory {Inventory.MaxAmount 40} //Item attention
Actor BotAttentionCooldown : Inventory {Inventory.MaxAmount 48} //Time to look for items again

//Unused
Actor TDBot_WeaponFiring : Inventory {}
Actor TDBots_BotFound : Inventory {}

//Base actor for all bot functions, given by ACS script TDBots_BotThink
Actor BotFunc : CustomInventory
{
	Inventory.PickupMessage ""
	Inventory.MaxAmount 1
	+Inventory.InterHubStrip
	+Inventory.AutoActivate
}


Actor BotFunc_Strafe : BotFunc
{
	states
	{
	Use:
		TNT1 A 0 A_ChangeVelocity(0, Accuracy/2, momz, CVF_REPLACE|CVF_RELATIVE)
		Stop
	}
}

Actor BotFunc_Strafe2 : BotFunc
{
	states
	{
	Use:
		TNT1 A 0 A_ChangeVelocity(0,-Accuracy/2, momz, CVF_REPLACE|CVF_RELATIVE)
		Stop
	}
}

//Resets the bot's target pointer so it doesn't circle around a dead bot
//Doesn't work sadly.
Actor BotFunc_Die : BotFunc
{
	states
	{
	Use:
		TNT1 A 0 A_TransferPointer(AAPTR_DEFAULT, AAPTR_TARGET, AAPTR_NULL, AAPTR_TARGET, PTROP_NOSAFEGUARDS)
		Stop
	}
}

Actor BotFunc_StartUp : BotFunc
{
	states
	{
	Use:
		TNT1 A 0 A_GiveInventory("TDBots_IsBot", 1)
		TNT1 A 0 ACS_NamedExecuteAlways("TDBots_BotThink", 0) //Init bot's thinking loop
		Stop
	}
}

Actor BotFunc_Roam : BotFunc
{
	states
	{
	Use:
		TNT1 A 0 A_ClearTarget
		TNT1 A 0 A_SetPitch(0)
		TNT1 A 0 A_JumpIfTargetInLOS("NormalChecks", 360)
		TNT1 A 0 A_JumpIfInventory("BotAttentionTimer", 40, "Cooldown") 
		TNT1 A 0 A_JumpIfInventory("TDBots_NavNodes", 1, "SearchNodes")
		TNT1 A 0 //A_CheckProximity("SeekItem",  "Armor", 768, 1, CPXF_ANCESTOR | CPXF_SETTARGET | CPXF_CHECKSIGHT)
		TNT1 A 0 //A_CheckProximity("SeekItem", "CustomInventory", 768, 1, CPXF_ANCESTOR | CPXF_SETTARGET | CPXF_CHECKSIGHT)
		TNT1 A 0 //A_CheckProximity("SeekItem",  "Ammo",  768, 1, CPXF_ANCESTOR | CPXF_SETTARGET | CPXF_CHECKSIGHT)
		TNT1 A 0 //A_CheckProximity("SeekItem", "Weapon", 512, 1, CPXF_ANCESTOR | CPXF_SETTARGET | CPXF_CHECKSIGHT)
		TNT1 A 0 A_Jump(256, "NormalChecks")
		Stop
		
	SearchNodes:
		//CheckProx("SeekItem", "Weapon", 128, 1, CPXF_ANCESTOR | CPXF_SETTARGET | CPXF_CHECKSIGHT)
		//CheckProx("FollowNode", "TDBots_PathNode", 384, 1, CPXF_CLOSEST | CPXF_SETTARGET | CPXF_CHECKSIGHT)
		TNT1 A 0 A_JumpIfInventory("TDBots_FollowNodeZan", 1, "FollowNode")
		TNT1 A 0 A_Jump(256, "NormalChecks")
		Stop
		
	Cooldown:
		TNT1 A 0 A_GiveInventory("BotAttentionCooldown", 1)
		TNT1 A 0 A_JumpIfInventory("BotAttentionCooldown", 48, "ResetTimer")
	NormalChecks:
		TNT1 A 0 A_CheckLOF("AvoidWall", CLOFF_SKIPOBSTACLES | CLOFF_JUMP_ON_MISS | CLOFF_SKIPTARGET | CLOFF_ALLOWNULL, 32, 0)
		TNT1 A 0 A_Jump(32, "TurnLeft", "TurnRight", "TurnLeftStrong", "TurnRightStrong") //Low chance of a random turn
		TNT1 A 0 A_Jump(256, "Proceed") //Set speed and look for targets
		Stop
		
	Proceed:
		TNT1 A 0 A_JumpIfInventory("BotPrecisionMode", 1, "ProceedPart2")
		TNT1 A 0 A_Jump(56, "Strafe")
		TNT1 A 0 A_Jump(256, "ProceedPart2")
		Stop
	ProceedPart2:
		TNT1 A 0 A_JumpIf(momz != 0, "Null")
		TNT1 A 0 A_ChangeVelocity(Accuracy/2, 0, momz, CVF_RELATIVE|CVF_REPLACE)
		TNT1 A 0 ACS_NamedExecuteAlways("TDBots_UseItems",0,TRUE)
		Stop
		
	AvoidWall: //Force turning if there's a wall nearby
		TNT1 A 0 A_Jump(256, "TurnLeft", "TurnRight", "TurnLeftStrong", "TurnRightStrong")
		Stop
		
	TurnLeft:
		TNT1 A 0 A_SetAngle(angle-32)
		TNT1 A 0 A_Jump(256, "Proceed")
		Stop
		
	TurnRight:
		TNT1 A 0 A_SetAngle(angle+32)
		TNT1 A 0 A_Jump(256, "Proceed")
		Stop
		
	TurnLeftStrong:
		TNT1 A 0 A_SetAngle(angle-64)
		TNT1 A 0 A_Jump(256, "Proceed")
		Stop
		
	TurnRightStrong:
		TNT1 A 0 A_SetAngle(angle+64)
		TNT1 A 0 A_Jump(256, "Proceed")
		Stop

	Strafe:
		TNT1 A 0 A_Jump(128, 3)
		TNT1 A 0 A_JumpIf(momz != 0, "Null")
		TNT1 A 0 A_ChangeVelocity(Accuracy/2, -Accuracy/2, momz, CVF_RELATIVE|CVF_REPLACE)
		TNT1 A 0 A_Jump(256, "StrafeEnd")
		TNT1 A 0 A_JumpIf(momz != 0, "Null")
		TNT1 A 0 A_ChangeVelocity(Accuracy/2, Accuracy/2, momz, CVF_RELATIVE|CVF_REPLACE)
		TNT1 A 0 A_Jump(256, "StrafeEnd")
		Stop
		
	StrafeEnd:
		TNT1 A 0 A_RailWait
		Stop
		
	SeekHealth:
		TNT1 A 0 //A_CheckProximity("SeekItem", "Health", 768, 1, CPXF_ANCESTOR | CPXF_SETTARGET | CPXF_CHECKSIGHT)
		TNT1 A 0 A_Jump(256, "NormalChecks")
		Stop
		
	SeekItem:
		TNT1 A 0 A_GiveInventory("BotAttentionTimer", 1)
	FollowNode:
		TNT1 A 0 A_JumpIfInventory("tdbots_lessfov", TRUE, "FollowNodeLessFOV")
		TNT1 A 0 A_LookEx(0, 0, 0, 0, 360, "")
	FollowNodeP2:
		TNT1 A 0 A_FaceTarget
		TNT1 A 0 A_CheckLOF("AvoidWall", CLOFF_SKIPOBSTACLES | CLOFF_JUMP_ON_MISS | CLOFF_SKIPTARGET | CLOFF_ALLOWNULL, 32, 0)
		TNT1 A 0 A_Jump(256, "Proceed")
		Stop
		
	FollowNodeLessFOV:
		TNT1 A 0 A_LookEx(0, 0, 0, 0, 120, "")
		TNT1 A 0 A_Jump(256, "FollowNodeP2")
		Stop
		
	ResetTimer:
		TNT1 A 0 A_TakeInventory("BotAttentionTimer", 40)
		TNT1 A 0 A_TakeInventory("BotAttentionCooldown", 48)
		TNT1 A 0 A_Jump(256, "NormalChecks")
		Stop
	}
}

Actor BotFunc_LightRoam : BotFunc_Roam
{
	states
	{
	Use:
		TNT1 A 0 A_SetPitch(0)
		TNT1 A 0 A_JumpIfTargetInLOS("NormalChecks", 360)
		TNT1 A 0 A_JumpIfInventory("BotAttentionTimer", 40, "Cooldown")
		TNT1 A 0 A_JumpIfInventory("TDBots_NavNodes", 1, "SearchNodes")
		TNT1 A 0 //A_CheckProximity("SeekItem",  "Armor", 768, 1, CPXF_ANCESTOR | CPXF_SETTARGET | CPXF_CHECKSIGHT)
		TNT1 A 0 //A_CheckProximity("SeekItem", "CustomInventory", 768, 1, CPXF_ANCESTOR | CPXF_SETTARGET | CPXF_CHECKSIGHT)
		TNT1 A 0 //A_CheckProximity("SeekItem",  "Ammo",  768, 1, CPXF_ANCESTOR | CPXF_SETTARGET | CPXF_CHECKSIGHT)
		TNT1 A 0 //A_CheckProximity("SeekItem", "Weapon", 768, 1, CPXF_ANCESTOR | CPXF_SETTARGET | CPXF_CHECKSIGHT)
		TNT1 A 0 A_Jump(256, "NormalChecks")
	
	Cooldown:
		TNT1 A 0 A_GiveInventory("BotAttentionCooldown", 1)
		TNT1 A 0 A_JumpIfInventory("BotAttentionCooldown", 48, "ResetTimer")
	NormalChecks:
		TNT1 A 0 A_ClearTarget
		TNT1 A 0 A_CheckLOF("AvoidWall", CLOFF_SKIPOBSTACLES | CLOFF_JUMP_ON_MISS | CLOFF_SKIPTARGET | CLOFF_ALLOWNULL, 32, 0)
		TNT1 A 0 A_Jump(256, "Proceed") //Set speed and look for targets
		Stop
	
	SeekHealth:
		TNT1 A 0 //A_CheckProximity("SeekItem", "Health", 768, 1, CPXF_ANCESTOR | CPXF_SETTARGET | CPXF_CHECKSIGHT)
		TNT1 A 0 A_Jump(256, "NormalChecks")
		Stop
	}
}

Actor BotFunc_AimDodge : BotFunc
{
	states
	{
	Use:
		TNT1 A 0 A_JumpIf(momz != 0, "Finish")
		TNT1 A 0 A_JumpIfInventory("BotPrecisionMode", 1, "Finish")
		
		TNT1 A 0 A_JumpIfInventory("BotMeleeWeapon", 1, "MeleeAttack") //Check if melee weapon flag set
		TNT1 A 0 A_JumpIfInventory("BotExplosiveWeapon", 1, "MoveBackwards") //Check if explosive weapon flag set
		TNT1 A 0 A_Jump(256, "Finish")
		Stop
		
	DodgeMore:
		TNT1 A 0 A_Jump(256, "DodgeLeft", "DodgeRight")
		TNT1 A 0 A_Jump(256, "Finish")
		Stop
		
	DodgeLeft:
		TNT1 A 0 A_ChangeVelocity(0, -Accuracy/2, momz, CVF_RELATIVE|CVF_REPLACE)
		TNT1 A 0 A_Jump(32, "MoveForward", "MoveBackwards") //Move further or closer from the target at random
		TNT1 A 0 A_Jump(256, "Finish")
		Stop
		
	DodgeRight:
		TNT1 A 0 A_ChangeVelocity(0, Accuracy/2, momz, CVF_RELATIVE|CVF_REPLACE)
		TNT1 A 0 A_Jump(32, "MoveForward", "MoveBackwards") //Move further or closer from the target at random
		TNT1 A 0 A_Jump(256, "Finish")
		Stop
		
	MoveForward:
		TNT1 A 0 A_JumpIfCloser(72, "MoveBackwards")
		TNT1 A 0 A_ChangeVelocity(Accuracy/2, momy, momz, CVF_RELATIVE|CVF_REPLACE)
		TNT1 A 0 A_Jump(256, "Finish")
		Stop
		
	MoveBackwards:
		TNT1 A 0 A_ChangeVelocity(-Accuracy/2, momy, momz, CVF_RELATIVE|CVF_REPLACE)
		TNT1 A 0 A_Jump(256, "Finish")
		Stop
		
	MeleeAttack:
		TNT1 A 0 A_FaceTarget
		TNT1 A 0 A_ChangeVelocity(Accuracy/8, momy, momz, CVF_RELATIVE|CVF_REPLACE)
		Stop
		
	Finish:
		TNT1 A 0 A_FaceTarget
		TNT1 A 0 A_CheckLOF("Attack", CLOFF_MUSTBESHOOTABLE | CLOFF_SKIPENEMY | CLOFF_SKIPNONHOSTILE)
		TNT1 A 0 A_TakeInventory("BotAttack")
		Stop
		
	Attack:
		TNT1 A 0 ACS_NamedExecuteAlways("TDBots_BotEasyMode", 0)
		Stop
		
	ExplosiveCheck: //Too close to target with explosive weapon? Back out!
		TNT1 A 0 A_JumpIfCloser(200, "MoveBackwards")
		TNT1 A 0 A_Jump(256, "Finish")
		Stop
	}
}

Actor BotFunc_Aim : BotFunc
{
	states
	{
	Use:
		TNT1 A 0 A_JumpIfInventory("BotPrecisionMode", 1, "Finish")
		
		TNT1 A 0 A_JumpIfInventory("BotMeleeWeapon", 1, "MeleeAttack") //Check if melee weapon flag set
		TNT1 A 0 A_JumpIfInventory("BotExplosiveWeapon", 1, "MoveBackwards") //Check if explosive weapon flag set
		//TNT1 A 0 A_JumpIfInventory("BotCloseRange", 1, "CloseRange")
		TNT1 A 0 A_Jump(256, "Finish")
		Stop
		
	CloseRange:
		TNT1 A 0 A_JumpIfCloser(256, "MoveBackwards")
		TNT1 A 0 A_Jump(256, "MeleeAttack")
		Stop
		
	MoveBackwards:
		TNT1 A 0 A_ChangeVelocity(-Accuracy/4, momy, momz, CVF_RELATIVE|CVF_REPLACE)
		TNT1 A 0 A_Jump(256, "Finish")
		Stop
		
	MeleeAttack:
		TNT1 A 0 A_FaceTarget
		TNT1 A 0 A_ChangeVelocity(Accuracy/4, momy, momz, CVF_RELATIVE|CVF_REPLACE)
		TNT1 A 0 A_CheckLOF("Attack", CLOFF_MUSTBESHOOTABLE | CLOFF_SKIPENEMY | CLOFF_SKIPNONHOSTILE)
		TNT1 A 0 A_TakeInventory("BotAttack")
		Stop
		
	Finish:
		TNT1 A 0 A_FaceTarget
		TNT1 A 0 A_CheckLOF("Attack", CLOFF_MUSTBESHOOTABLE | CLOFF_SKIPENEMY | CLOFF_SKIPNONHOSTILE)
		TNT1 A 0 A_TakeInventory("BotAttack")
		Stop
		
	Attack:
		TNT1 A 0 ACS_NamedExecuteAlways("TDBots_BotEasyMode", 0)
		TNT1 A 0 A_GiveInventory("BotAttack")
		Stop	
	}
}

Actor BotFunc_CheckLOS : BotFunc
{
	states
	{
	Use:
		TNT1 A 0 A_JumpIfInventory("tdbots_lessfov", TRUE, "LessFOVLook")
		TNT1 A 0 A_LookEx(0, 0, 0, 0, 360, "")
	UseP2:
		TNT1 A 0 A_FaceTarget
		TNT1 A 0 A_CheckLOF("CheckAttack", CLOFF_MUSTBESHOOTABLE)
		Stop
		
	CheckAttack:
		TNT1 A 0 A_JumpIf(CallACS("TDBots_IsAlly") == TRUE, "Null")
		TNT1 A 0 A_Jump(256, "Attack")
		Stop
		
	Attack:
		TNT1 A 0 ACS_NamedExecuteAlways("TDBots_BotEasyMode", 0)
		TNT1 A 0 A_GiveInventory("BotAttack", 1)
		Stop
		
	LessFOVLook:
		TNT1 A 0 A_LookEx(0, 0, 0, 0, 120, "")
		TNT1 A 0 A_Jump(256, "UseP2")
		Stop
	}
}

Actor BotFunc_FireStop : BotFunc
{
	states
	{
	Use:
		TNT1 A 0 A_TakeInventory("BotAttack", 1)
		Stop
	}
}

Actor BotFunc_BuffDoom : BotFunc
{
	states
	{
	Use:
		TNT1 A 0 A_SpawnItemEx("Shell", 0, 0, 0, 0, 0, 0, 0, 0, 0, 987000)
		TNT1 A 0 A_SpawnItemEx("Clip", 0, 0, 0, 0, 0, 0, 0, 0, 0, 987000)
		TNT1 A 0 A_SpawnItemEx("RocketAmmo", 0, 0, 0, 0, 0, 0, 0, 0, 0, 987000)
		TNT1 A 0 A_SpawnItemEx("Cell", 0, 0, 0, 0, 0, 0, 0, 0, 0, 987000)
		TNT1 A 0 A_SpawnItemEx("HealthBonus", 0, 0, 0, 0, 0, 0, 0, 0, 0, 987000)
		Stop
	}
}

Actor BotFunc_BuffHeretic : BotFunc
{
	states
	{
	Use:
		TNT1 A 0 A_SpawnItemEx("CrossbowAmmo", 0, 0, 0, 0, 0, 0, 0, 0, 0, 987000)
		TNT1 A 0 A_SpawnItemEx("GoldWandAmmo", 0, 0, 0, 0, 0, 0, 0, 0, 0, 987000)
		TNT1 A 0 A_SpawnItemEx("SkullrodAmmo", 0, 0, 0, 0, 0, 0, 0, 0, 0, 987000)
		TNT1 A 0 A_SpawnItemEx("PhoenixRodAmmo", 0, 0, 0, 0, 0, 0, 0, 0, 0, 987000)
		TNT1 A 0 A_SpawnItemEx("BlasterAmmo", 0, 0, 0, 0, 0, 0, 0, 0, 0, 987000)
		TNT1 A 0 A_SpawnItemEx("HealthBonus", 0, 0, 0, 0, 0, 0, 0, 0, 0, 987000)
		Stop
	}
}

Actor BotFunc_BuffHexen : BotFunc
{
	states
	{
	Use:
		TNT1 A 0 A_SpawnItemEx("Mana1", 0, 0, 0, 0, 0, 0, 0, 0, 0, 987000)
		TNT1 A 0 A_SpawnItemEx("Mana2", 0, 0, 0, 0, 0, 0, 0, 0, 0, 987000)
		TNT1 A 0 A_SpawnItemEx("HealthBonus", 0, 0, 0, 0, 0, 0, 0, 0, 0, 987000)
		Stop
	}
}

Actor BotFunc_BuffStrife : BotFunc
{
	states
	{
	Use:
		TNT1 A 0 A_SpawnItemEx("AmmoSatchel", 0, 0, 0, 0, 0, 0, 0, 0, 0, 987000)
		Stop
	}
}

//Teleport call stuff
Actor TDBot_DoNotAllowTeleport : Inventory {}

Actor TDBot_TeleportCall : CustomInventory
{
	-INVBAR
	+INVENTORY.INTERHUBSTRIP
	states
	{
	Use:
		TNT1 A 0 A_JumpIfInventory("TDBot_DoNotAllowTeleport", 1, "UseButFail")
		TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("TDBots_NeedSomeHelp") == TRUE, "SpawnSpot")
		Fail
	SpawnSpot:
		TNT1 A 0 A_SpawnItem("Bot_TeleportSpot")
		Fail
	UseButFail:
		TNT1 A 0 A_Print("You can't call a bot right now\nStill cooling down.")
		Fail
	}
}

Actor Bot_TeleportSpot
{
	+THRUACTORS
	-SHOOTABLE
	Speed 30
	states
	{
	Spawn:
		TNT1 AA 0 Thing_ChangeTID(0,16231)
		TNT1 AAAAA 0 A_Wander
		TNT1 A 1 A_Wander
		TNT1 AAAAA 0 A_Wander
		TNT1 A 1 A_Wander
		TNT1 A -1
		Stop
	}
}