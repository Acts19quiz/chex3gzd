If you are a modder and you want to add support for the TDBots into your mod,
look no further, as this file has all information you may need.

First, the TDBots are more customizable than the ZCajun bots or the Skullbots.
So if your mod has special things you would need the bot to do, like reloading
or using special items like grenades, altfires in your weapons or special
behavior when carrying specific weapons you can do that without editing the bots
themselves thanks to the custom actions added in v17.

These are quite similar to the usual hacks of making the bot do something at 
random using ACS, but can be set to happen exactly when the bot starts doing
something, and don't necessarily require using ACS.

What this guide covers:
-Editing weapons slightly to make them work with the bots
	(No noticeable changes for the average player though).
	
-Usage of weapon flags for special behavior with certain weapons.

-Playerclass specific properties (Just the speed, because 
	everything else is done automatically).
	
-Custom actions, like usage of alt fire and inventory items.

-Making weapon and ammo lists for Rocket Arena mode.

-Global flags, which alter TDBots behavior.

=================================BASIC STUFF====================================

Let's get over the process to make the bots work with your mod in the most basic
way possible, which is adapting the weapons.
Thankfully, this process is easy, if a bit tedious sometimes, so take it slow
if your mod has many complex weapons.

Copy-paste these actor definitions before any weapon:

Actor BotAttack : Inventory {}
Actor BotAltAttack : Inventory {}
Actor BotExplosiveWeapon : Inventory {}
Actor BotMeleeWeapon : Inventory {}
Actor BotForceInacc : Inventory {}
Actor BotCloseRange : Inventory {}

These aren't necessary but they fix warnings on startup when the TDBots
aren't loaded.

You must add after every A_WeaponReady call (that doesn't stop the player from
firing of course) the following line of code:
TNT1 A 0 A_JumpIfInventory("BotAttack", TRUE, "Fire")

And in every A_Refire call you should add something similar:
TNT1 A 0 A_JumpIfInventory("BotAttack", TRUE, "Fire")
Where "Fire" could also be "Hold" if such a state is defined in your weapon.
If the A_Refire call specifies another state (such as A_Refire("HoldP2") )
You should change "Fire" to reflect that same state.

Once this is done with all weapons, the bot should work. At this point, all
features of the TDBots that work with the IWADs should work with your mod just
the same.

If you are going to add altfiring with custom actions, add this line right before
the "BotAttack" check but after the A_WeaponReady call:
TNT1 A 0 A_JumpIfInventory("BotAltAttack", TRUE, "AltFire")
All of the rules about A_Refire and this line of code still apply, except that
"Hold" is changed to "AltHold" instead.

===============================USING WEAPON FLAGS===============================

There are also weapon flags, that allow the bot to act differently depending on
what weapon it is holding.

Currently these flags are accepted by default:
BotExplosiveWeapon
BotMeleeWeapon
BotForceInacc

To set these, do the following:

In the Select state of the weapon in question, add a line like this:
TNT1 A 0 A_GiveInventory("NameOfFlag")

And in the Deselect state, add a line like this:
TNT1 A 0 A_TakeInventory("NameOfFlag")

Obviously, both should have the same flag name. BotExplosiveWeapon should only
be used if the bot can be damaged with the explosion of the weapon.

BotMeleeWeapon should only be used if the weapon is very short ranged, like a
fist or something similar. It could also be used if the weapon has very drastic
damage falloff with distance, like Final Doomer's BTSX Super sonic blaster.

BotForceInacc is for weapons that are inaccurate until first refire
(Like Doom's Pistol and Chaingun, Heretic's gold wand) so they are properly
inaccurate instead of pinpoint accurate in the bot's hands. If your weapon
fires multiple bullets with one A_FireBullets call (A shotgun, probably) or the
numbullets parameter on most A_FireBullets calls is -1, you don't need this.

It doesn't matter if the actions get repeated again as part of the state loop,
as they only have an effect the first time they get executed.


===============================ADVANCED FEATURES================================

Now comes the advanced features i mentioned earlier.
For setting a class' speed, use the Accuracy property. The base Doomguy speed is
24, so change it to make it as close as your class' running speed as possible.
If you need help seeing the changes in an easy way, tdbots_playerbot 1 will make
your player character also work like a bot, which helps you immediately see any
changes in speed and stuff quickly and easily.

If the Accuracy property is 0 or not defined, the TDBots will automatically set
it to base Doomguy speed, as in Doom, Hexen, Heretic and Strife.

I also mentioned custom actions for the bots, which can be done in the following
way:

Define a new actor, named like one of these, inheriting from CustomInventory:
TDBots_Custom_RoamLoop1 or TDBots_Custom_RoamLoop2
These are if the bot is doing it's basic roaming. These will be executed every
4 tics if the bot is not attacking and just running around.

TDBots_Custom_AttackLoop1 or TDBots_Custom_AttackLoop2
These are executed every time the bot is attacking and not strafing at the same
time. It is guaranteed to execute when the bots start attacking, and has a
chance of being executed again if the bot isn't strafing.

If any of these are defined, the TDBot's code will detect it and place it in
the regular bot action loop. Obviously, it's going to crash and burn if it's not
a CustomInventory item (It could also be Inventory, but that's useless).

============================CODING THE CUSTOM ACTIONS===========================

It's a very simple to use kind of thing. As an example, let's make a bot use
Heretic's tome of power. I'm going to avoid using ACS for this, but you could
just use UseInventory("ArtiTomeOfPower"); in an ACS script 
and call that randomly.

(note: As of v18, the TDBots already use Heretic items automatically. So
	it might be a better idea to replace the "A_GiveInventory" call with
	something different so you can tell if it's actually working)

This actor must have +INVENTORY.AUTOACTIVATE or else it won't work at all.

Actor TDBots_Custom_AttackLoop1 : CustomInventory
{
	+INVENTORY.AUTOACTIVATE
	states
	{
	Use: //Check if the bot has the tome of power.
		TNT1 A 0 A_JumpIfInventory("ArtiTomeOfPower", TRUE, "UseTomeOfPower")
		Stop
	UseTomeOfPower: //It has it, so let's roll the dice and see if we use it.
		TNT1 A 0 A_Jump(128, "ActivateTome")
		Stop
	ActivateTome:
		TNT1 A 0 A_GiveInventory("TOP_ForceActive", 1)
		TNT1 A 0 A_TakeInventory("ArtiTomeOfPower", 1)//Take the real tome away.
		Stop
	}
}

And the TOP_ForceActive item is a tome of power that activates immediately when
it enters your inventory. So we can activate the item from DECORATE without using
ACS.
Here's the code:

Actor TOP_ForceActive : ArtiTomeOfPower {+INVENTORY.AUTOACTIVATE}

Now, with this code in place, the bot will now use Heretic's tome of power, if
it's carrying it in it's inventory, it's attacking, and if the dice roll says 
that it should. Pretty cool right? You can easily define many other things 
like this using the custom actions.

You can use most actions you can use in a weapon, like A_SpawnItemEx, A_Jump and
it's variants among many others. All actions that are exclusive to weapons are
A_ZoomFactor and A_SetCrosshair, but those don't matter for bots anyways.

You can even use stuff like A_FireShotgun directly in these actions.


==============================ROCKET ARENA MODE=================================

Rocket Arena mode will work fine even if you don't make lists for it. However,
if you make a weapon and ammo list, you can control which weapons are given
to the players and which ones aren't, and bots can pick one random weapon
at start instead of always using the same at first.

If you define these, making both the weapon and ammo lists are required. One
won't work without the other.

Now, to make one, just create a LANGUAGE file, optionally give it the .tdbots
extension if you already have one, and put the following:

[enu default]

TDBOTS_RA_WEAPONS = "weapon;weapon;weapon";
TDBOTS_RA_AMMO = "ammo;ammo;ammo";

Where "weapon" is a weapon actor, and "ammo" is an ammo or inventory actor.
Of course, you aren't limited to just 3, you can add as many weapon actor names
as your mod has, as long as you separate every actor name with a ; character.

Ammo can also contain any inventory items you want the player to start out
with in Rocket Arena. Make sure to give health and armor here, since they
aren't given by default if a custom weapon list is detected!

NOTE: When adding the final weapon name, remember to NOT place a ; character
at the end inside the quotes, because this may cause undefined behavior!

And don't put in the starting weapons (Example: If your player starts out with
a pistol and fist, you shouldn't put those weapons in the weapon list).


=================================GLOBAL FLAGS===================================

Global flags serve to change certain TDBots behavior to fix various bugs with
certain mod tricks. Global flags of different types could be added in
the future though.

Currently, the only global flag is TDBots_NoAnimation.
If an actor with this name is defined, the TDBots won't simulate animations.
Use this if walking animations don't look right in your mod, or if the death
animations play twice.

If you have any questions about this or need some more help, contact me
in the ZDoom forums or Zandronum forums, where my user name is TDRR.